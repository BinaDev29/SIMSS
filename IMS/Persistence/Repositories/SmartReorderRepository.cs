// Persistence/Repositories/SmartReorderRepository.cs
using Application.Contracts;
using Application.DTOs.Common;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Persistence.Repositories
{
    public class SmartReorderRepository : GenericRepository<SmartReorder>, ISmartReorderRepository
    {
        public SmartReorderRepository(SIMSDbContext dbContext) : base(dbContext)
        {
        }

        public async Task<PagedResult<SmartReorder>> GetPagedReordersAsync(int pageNumber, int pageSize, string? status, string? reorderReason, CancellationToken cancellationToken)
        {
            var query = _context.Set<SmartReorder>().AsQueryable();

            if (!string.IsNullOrEmpty(status))
            {
                query = query.Where(r => r.Status == status);
            }

            if (!string.IsNullOrEmpty(reorderReason))
            {
                query = query.Where(r => r.ReorderReason == reorderReason);
            }

            var totalCount = await query.CountAsync(cancellationToken);
            var items = await query
                .Include(r => r.Item)
                .Include(r => r.Godown)
                .Include(r => r.Supplier)
                .OrderByDescending(r => r.ReorderDate)
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync(cancellationToken);

            return new PagedResult<SmartReorder>(items, totalCount, pageNumber, pageSize);
        }

        public async Task<IReadOnlyList<SmartReorder>> GetPendingReordersAsync(CancellationToken cancellationToken)
        {
            return await _context.Set<SmartReorder>()
                .Where(r => r.Status == "PENDING")
                .Include(r => r.Item)
                .Include(r => r.Godown)
                .Include(r => r.Supplier)
                .OrderByDescending(r => r.ReorderDate)
                .ToListAsync(cancellationToken);
        }

        public async Task<IReadOnlyList<SmartReorder>> GetReordersByItemAsync(int itemId, CancellationToken cancellationToken)
        {
            return await _context.Set<SmartReorder>()
                .Where(r => r.ItemId == itemId)
                .Include(r => r.Item)
                .Include(r => r.Godown)
                .Include(r => r.Supplier)
                .OrderByDescending(r => r.ReorderDate)
                .ToListAsync(cancellationToken);
        }

        public async Task<IReadOnlyList<SmartReorder>> GetAutoGeneratedReordersAsync(CancellationToken cancellationToken)
        {
            return await _context.Set<SmartReorder>()
                .Where(r => r.IsAutoGenerated)
                .Include(r => r.Item)
                .Include(r => r.Godown)
                .Include(r => r.Supplier)
                .OrderByDescending(r => r.ReorderDate)
                .ToListAsync(cancellationToken);
        }

        public async Task<SmartReorder?> GetLatestReorderByItemAsync(int itemId, int godownId, CancellationToken cancellationToken)
        {
            return await _context.Set<SmartReorder>()
                .Where(r => r.ItemId == itemId && r.GodownId == godownId)
                .Include(r => r.Item)
                .Include(r => r.Godown)
                .Include(r => r.Supplier)
                .OrderByDescending(r => r.ReorderDate)
                .FirstOrDefaultAsync(cancellationToken);
        }

        public async Task UpdateStatusAsync(int reorderId, string status, CancellationToken cancellationToken)
        {
            var reorder = await _context.Set<SmartReorder>().FindAsync(new object[] { reorderId }, cancellationToken);
            if (reorder != null)
            {
                reorder.Status = status;
                if (status == "RECEIVED" && reorder.ActualDelivery == null)
                {
                    reorder.ActualDelivery = DateTime.UtcNow;
                }
            }
        }

        public async Task<IReadOnlyList<SmartReorder>> GetOverdueReordersAsync(CancellationToken cancellationToken)
        {
            var currentDate = DateTime.UtcNow;
            return await _context.Set<SmartReorder>()
                .Where(r => r.Status == "ORDERED" && r.ExpectedDelivery.HasValue && r.ExpectedDelivery < currentDate)
                .Include(r => r.Item)
                .Include(r => r.Godown)
                .Include(r => r.Supplier)
                .OrderBy(r => r.ExpectedDelivery)
                .ToListAsync(cancellationToken);
        }

        public Task AddAsync(SmartReorder smartReorder)
        {
            throw new NotImplementedException();
        }
    }
}