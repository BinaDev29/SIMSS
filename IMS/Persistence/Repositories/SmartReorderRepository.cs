// Persistence/Repositories/SmartReorderRepository.cs
using Application.Contracts;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using System.Threading;
using System.Threading.Tasks;

namespace Persistence.Repositories
{
    public class SmartReorderRepository : GenericRepository<SmartReorder>, ISmartReorderRepository
    {
        private readonly SIMSDbContext _context;

        public SmartReorderRepository(SIMSDbContext dbContext) : base(dbContext)
        {
            _context = dbContext;
        }

        public async Task<IReadOnlyList<SmartReorder>> GetReordersByItemAsync(int itemId, CancellationToken cancellationToken)
        {
            return await _context.SmartReorders
                .Include(sr => sr.Godown)
                .Include(sr => sr.Supplier)
                .Where(sr => sr.ItemId == itemId)
                .OrderByDescending(sr => sr.ReorderDate)
                .ToListAsync(cancellationToken);
        }

        public async Task<IReadOnlyList<SmartReorder>> GetReordersByStatusAsync(string status, CancellationToken cancellationToken)
        {
            return await _context.SmartReorders
                .Include(sr => sr.Item)
                .Include(sr => sr.Godown)
                .Include(sr => sr.Supplier)
                .Where(sr => sr.Status == status)
                .OrderByDescending(sr => sr.ReorderDate)
                .ToListAsync(cancellationToken);
        }

        public async Task<IReadOnlyList<SmartReorder>> GetPendingReordersAsync(CancellationToken cancellationToken)
        {
            return await _context.SmartReorders
                .Include(sr => sr.Item)
                .Include(sr => sr.Godown)
                .Include(sr => sr.Supplier)
                .Where(sr => sr.Status == "PENDING")
                .OrderByDescending(sr => sr.ReorderDate)
                .ToListAsync(cancellationToken);
        }

        public async Task<IReadOnlyList<SmartReorder>> GetAutoGeneratedReordersAsync(CancellationToken cancellationToken)
        {
            return await _context.SmartReorders
                .Include(sr => sr.Item)
                .Include(sr => sr.Godown)
                .Include(sr => sr.Supplier)
                .Where(sr => sr.IsAutoGenerated)
                .OrderByDescending(sr => sr.ReorderDate)
                .ToListAsync(cancellationToken);
        }

        public async Task<PagedResult<SmartReorder>> GetPagedReordersAsync(int pageNumber, int pageSize, string? searchTerm, CancellationToken cancellationToken)
        {
            var query = _context.Set<SmartReorder>()
                .Include(sr => sr.Item)
                .Include(sr => sr.Godown)
                .Include(sr => sr.Supplier)
                .AsQueryable();

            if (!string.IsNullOrEmpty(searchTerm))
            {
                query = query.Where(sr => sr.Item!.ItemName.Contains(searchTerm) || 
                                         sr.Supplier!.SupplierName.Contains(searchTerm) ||
                                         sr.Status.Contains(searchTerm) ||
                                         sr.ReorderReason.Contains(searchTerm));
            }

            var totalCount = await query.CountAsync(cancellationToken);
            var items = await query
                .OrderByDescending(sr => sr.ReorderDate)
                .Skip((pageNumber - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync(cancellationToken);

            return new PagedResult<SmartReorder>(items, totalCount, pageNumber, pageSize);
        }

        Task<Application.DTOs.Common.PagedResult<SmartReorder>> ISmartReorderRepository.GetPagedReordersAsync(int pageNumber, int pageSize, string? searchTerm, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }
    }
}