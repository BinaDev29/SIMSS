// Application/Contracts/ISmartReorderRepository.cs
using Application.DTOs.Common;
using Domain.Models;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Application.Contracts
{
    public interface ISmartReorderRepository : IGenericRepository<SmartReorder>
    {
        Task<IReadOnlyList<SmartReorder>> GetReordersByItemAsync(int itemId, CancellationToken cancellationToken);
        Task<IReadOnlyList<SmartReorder>> GetReordersByStatusAsync(string status, CancellationToken cancellationToken);
        Task<IReadOnlyList<SmartReorder>> GetPendingReordersAsync(CancellationToken cancellationToken);
        Task<IReadOnlyList<SmartReorder>> GetAutoGeneratedReordersAsync(CancellationToken cancellationToken);
        Task<PagedResult<SmartReorder>> GetPagedReordersAsync(int pageNumber, int pageSize, string? searchTerm, string? reorderReason, CancellationToken cancellationToken);
        Task AddAsync(SmartReorder smartReorder);
        Task<PagedResult<SmartReorder>> GetPagedReordersAsync(int pageNumber, int pageSize, string? searchTerm, CancellationToken cancellationToken);
    }
}